/**
 * @file buildinfo.h
 *
 * @brief This file contains functions that provide a consistent method for
 * querying the version numbers and build info for MIP libraries and
 * applications.
 *
 * All projects need to link the autogenerated file buildinfo.c and your
 * project should include buildinfo.h (this file) in the module that will
 * call these functions. (They are all static)
 *
 * These functions work in conjunction with a library or application specific
 * instance of the _buildinfo struct. The struct is globally defined in
 * buildinfo.c according to the name derived from the Makefile PACKAGE macro by
 * the shell script buildinfo.sh which is called from the Makefile.
 *
 * You may write a function to handle the --version switch and get the version
 * information from dependent libs by using the functions declared in this
 * file. The first argument to all of these functions is a pointer to a specific
 * instance of the _buildinfo struct.
 *
 * eg. You may call:
 *
 *  char *summary = GetVersionSummary(&libirl_buildinfo);
 *  printf("%s\n", summary);
 *  free(summary);
 *
 * to get a version summary for a package named libirl.
 *
 * You may of course do this for all dependent libs that were linked
 * into your application and you should in fact do this.
 *
 * @sa buildinfo.c
 *
 * @code $Id$ @endcode
 */

#ifndef BUILDINFO_H
#define BUILDINFO_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

	typedef struct _buildinfo {
		const char *name;
		const char *version;
		const char *date;
		const char *url;
		const char *dir;
		const char *user;
		const char *host;
		const char *revision;
		const char *kernel;
		const char *machine;
    const char *compiler;
    const char *compiler_version;
	} BuildInfo, BuildInfo_t;

	/* These functions return a single field from the struct */

	static const char* GetBuildName(BuildInfo*);
	static const char* GetBuildVersion(BuildInfo*);
	static const char* GetBuildDate(BuildInfo*);
	static const char* GetBuildURL(BuildInfo*);
	static const char* GetBuildDir(BuildInfo*);
	static const char* GetBuildUser(BuildInfo*);
	static const char* GetBuildHost(BuildInfo*);
	static const char* GetBuildRevision(BuildInfo*);
	static const char* GetBuildKernel(BuildInfo*);
	static const char* GetBuildMachine(BuildInfo*);
	static const char* GetBuildCompiler(BuildInfo*);
	static const char* GetBuildCompilerVersion(BuildInfo*);

	/* These functions return a dynamically allocated aggregated string */

	static const char* GetBuildSummary(BuildInfo *buildinfo);
	static const char* GetBuildString(BuildInfo *buildinfo);

	/* Convenience functions */

	static int CheckBuildVersion(BuildInfo*, int major, int minor, int patch);
	static int CheckForVersionSwitch(int argc, char **argv);


/**
 * @brief Get the package name.
 *
 * @return The package name as a string.
 */

static const char* GetBuildName(BuildInfo *buildinfo)
{
	return buildinfo->name;
}

/**
 * @brief Get the package version.
 *
 * Format of the string is "MAJOR.MINOR.PATCH"
 *
 * @return The version number as a string.
 */

static const char* GetBuildVersion(BuildInfo *buildinfo)
{
	return buildinfo->version;
}

/**
 * @brief Get the build date.
 *
 * @return The build date as a string.
 */

static const char* GetBuildDate(BuildInfo *buildinfo)
{
	return buildinfo->date;
}

/**
 * @brief Get the build subversion URL
 *
 * @return The URL the repo was checked out from.
 */

static const char* GetBuildURL(BuildInfo *buildinfo)
{
	return buildinfo->url;
}

/**
 * @brief Get the build directory.
 *
 * @return The build directory as a string.
 */

static const char* GetBuildDir(BuildInfo *buildinfo)
{
	return buildinfo->dir;
}

/**
 * @brief Get the build user.
 *
 * @return The build user as a string.
 */

static const char* GetBuildUser(BuildInfo *buildinfo)
{
	return buildinfo->user;
}

/**
 * @brief Get the build host.
 *
 * @return The build host as a string.
 */

static const char* GetBuildHost(BuildInfo *buildinfo)
{
	return buildinfo->host;
}

/**
 * @brief Get the build revision.
 *
 * @return The subversion revision as a string.
 */

static const char* GetBuildRevision(BuildInfo *buildinfo)
{
	return buildinfo->revision;
}

/**
 * @brief Get the build kernel.
 *
 * @return The build kernel as a string.
 */

static const char* GetBuildKernel(BuildInfo *buildinfo)
{
	return buildinfo->kernel;
}

/**
 * @brief Get the build machine.
 *
 * @return The build machine as a string.
 */

static const char* GetBuildMachine(BuildInfo *buildinfo)
{
	return buildinfo->machine;
}

/**
 * @brief Get compler name.
 *
 * @return The build compiler name as a string.
 */

static const char* GetBuildCompiler(BuildInfo *buildinfo)
{
	return buildinfo->compiler;
}

/**
 * @brief Get compler version.
 *
 * @return The build compiler version as a string.
 */

static const char* GetBuildCompilerVersion(BuildInfo *buildinfo)
{
	return buildinfo->compiler_version;
}

/**
 * @brief Check the internal version against the version represented
 * by the 3 args.
 *
 * The internal version number is composed from MAJOR.MINOR.PATCH
 *
 * @param major - The major version you want, true if @a major == MAJOR.
 * @param minor - The minor version you want, true if @a minor <= MINOR.
 * @param patch - The patch version you want, true if @a patch <= PATCH.
 *
 * @return int - 0 = false, 1 = true
 */

static int CheckBuildVersion(BuildInfo *buildinfo, int major,
	int minor, int patch)
{
	int _major, _minor, _patch;
	sscanf(buildinfo->version, "%d.%d.%d", &_major, &_minor, &_patch);
	if (major == _major && minor <= _minor && patch <= _patch)
		return 1;
	else
		return 0;
}

/**
 * @brief Get a version summary.
 *
 * @Note: The caller needs to free the returned pointer.
 *
 * @return Several parameters formatted with linefeeds as a string.
 */

static const char* GetBuildSummary(BuildInfo *buildinfo)
{
	char *summary = (char*) malloc(1024);

	int n = 0;

	n += sprintf(summary+n, "%s Version: %s\n", buildinfo->name,
		buildinfo->version);
	n += sprintf(summary+n, "Built by: %s@%s on %s\n",
		buildinfo->user, buildinfo->host, buildinfo->date);
	n += sprintf(summary+n, "Built from: %s\n", buildinfo->dir);
	n += sprintf(summary+n, "Built with: %s %s\n",
		buildinfo->compiler, buildinfo->compiler_version);
	n += sprintf(summary+n, "Subversion %s Revision: %s\n",
		buildinfo->url, buildinfo->revision);
	n += sprintf(summary+n, "Arch: %s Kernel: %s\n", buildinfo->machine,
		buildinfo->kernel);

	return summary;
}

/**
 * @brief Get a short version summary as a one line string
 *
 * @Note: The caller needs to free the returned pointer.
 *
 * @return Package name, version and revision.
 */

static const char* GetBuildString(BuildInfo *buildinfo)
{
	char *summary = (char*) malloc(1024);

	sprintf(summary, "%s Version: %s Revision: %s",
		buildinfo->name, buildinfo->version, buildinfo->revision);

	return summary;
}

/**
 * @brief Check the arguments for --version
 *
 * @return int 1 if found, 0 otherwise.
 */

static int CheckForVersionSwitch(int argc, char **argv)
{
	while (--argc)
		if (strstr(*++argv, "--version"))
			return 1;
	return 0;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* VERSION_H */
